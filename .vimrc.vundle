set nocompatible              " 去除VI一致性,必须
filetype off                  " 必须

" 设置包括vundle和初始化相关的runtime path
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" 另一种选择, 指定一个vundle安装插件的路径
"call vundle#begin('~/some/path/here')

" 让vundle管理插件版本,必须
Plugin 'VundleVim/Vundle.vim'

" 以下范例用来支持不同格式的插件安装.
" 请将安装插的命令放在vundle#begin和vundle#end之间.
" Github上的插件
" 格式为 Plugin '用户名/插件仓库名'
" Plugin 'tpope/vim-fugitive'
" 来自 http://vim-scripts.org/vim/scripts.html 的插件
" Plugin '插件名称' 实际上是 Plugin 'vim-scripts/插件仓库名' 只是此处的用户名可以省略
" Plugin 'L9'
" 由Git支持但不再github上的插件仓库 Plugin 'git clone 后面的地址'
" Plugin 'git://git.wincent.com/command-t.git'
" 本地的Git仓库(例如自己的插件) Plugin 'file:///+本地插件仓库绝对路径'
" Plugin 'file:///home/gmarik/path/to/plugin'
" 插件在仓库的子目录中.
" 正确指定路径用以设置runtimepath. 以下范例插件在sparkup/vim目录下
" Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" 避免插件名冲突,例如L9已存在,则可以指定
" Plugin 'user/L9', {'name': 'newL9'}

" ==============================================================================
" 主题
" ==============================================================================

Plugin 'tomasr/molokai'             " molokai 配色方案
Plugin 'terryma/vim-multiple-cursors'   " multiple cursors
Plugin 'asins/vimcdoc'      " VIM中文文档
Plugin 'tpope/vim-fugitive' 

" ----------------- 语法检查 ------------------
Plugin 'vim-syntastic/syntastic'       " Syntax checking hacks for vim
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_enable_highlighting=1
" Python
" let g:syntastic_python_checkers=['pyflakes'] " 使用pyflakes,速度比pylint快
let g:syntastic_python_checkers=['pyflakes', 'pep8']
" let g:syntastic_python_checkers=['pylint']
" Golang
let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }

function! ToggleErrors()
    let old_last_winnr = winnr('$')
    lclose
    if old_last_winnr == winnr('$')
        " Nothing was closed, open syntastic error location panel
        Errors
    endif
endfunction
nnoremap <Leader>s :call ToggleErrors()<cr>
" nnoremap <Leader>sn :lnext<cr>
" nnoremap <Leader>sp :lprevious<cr>


" ----------------- 自动补全 ------------------

" 代码补全
Plugin 'Valloric/YouCompleteMe' " A code-completion engine for Vim
let g:ycm_key_list_select_completion=['<c-n>']
" let g:ycm_key_list_select_completion = ['<Down>']
let g:ycm_key_list_previous_completion=['<c-p>']
" let g:ycm_key_list_previous_completion = ['<Up>']
let g:ycm_path_to_python_interpreter='/usr/bin/python3'
let g:ycm_complete_in_comments = 1  "在注释输入中也能补全
let g:ycm_complete_in_strings = 1   "在字符串输入中也能补全
let g:ycm_use_ultisnips_completer = 1 "提示UltiSnips
let g:ycm_seed_identifiers_with_syntax=1   "语言关键字补全
let g:ycm_collect_identifiers_from_comments_and_strings = 1   "注释和字符串中的文字也会被收入补全
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_goto_buffer_command = 'horizontal-split'  " 跳转到定义处, 分屏打开

let g:ycm_python_binary_path = '/usr/bin/python3'   " Python3
let g:ycm_rust_src_path = '/home/dawndiy/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src'   " Python3

" nnoremap <leader>jd :YcmCompleter GoToDefinition<CR>
nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <leader>gd :YcmCompleter GoToDeclaration<CR>

" 自动补全引号、括号等
Plugin 'Raimondi/delimitMate'   " Vim plugin, provides insert mode auto-completion for quotes, parens, brackets, etc.
au FileType python let b:delimitMate_nesting_quotes = ['"']     " for python docstring
" au FileType mail let b:delimitMate_autoclose = 0"    " 关闭某些类型文件的自动补全

" 代码片段快速插入
Plugin 'SirVer/ultisnips'   " UltiSnips is the ultimate solution for snippets in Vim. It has tons of features and is very fast.
Plugin 'honza/vim-snippets' " vim-snipmate default snippets (Previously snipmate-snippets)
let g:UltiSnipsExpandTrigger       = "<tab>"
" let g:UltiSnipsJumpForwardTrigger  = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
let g:UltiSnipsSnippetDirectories  = ['UltiSnips']
let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips'
" 定义存放代码片段的文件夹 .vim/UltiSnips下，使用自定义和默认的，将会的到全局，有冲突的会提示
" 进入对应filetype的snippets进行编辑
map <leader>us :UltiSnipsEdit<CR>

" ctrl+j/k 进行选择
func! g:JInYCM()
    if pumvisible()
        return "\<C-n>"
    else
        return "\<c-j>"
    endif
endfunction

func! g:KInYCM()
    if pumvisible()
        return "\<C-p>"
    else
        return "\<c-k>"
    endif
endfunction
inoremap <c-j> <c-r>=g:JInYCM()<cr>
au BufEnter,BufRead * exec "inoremap <silent> " . g:UltiSnipsJumpBackwordTrigger . " <C-R>=g:KInYCM()<cr>"
let g:UltiSnipsJumpBackwordTrigger = "<c-k>"


" ----------------- 快速导航 ------------------

" 目录导航
Plugin 'scrooloose/nerdtree'        " A tree explorer plugin for vim.
map <leader>n :NERDTreeToggle<CR>   " 切换开关
" 忽略显示
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$', '\.swp$', '\.qmlc$' ]

" NERDTreeTabs
Plugin 'jistr/vim-nerdtree-tabs'
map <Leader>n <plug>NERDTreeTabsToggle<CR>
" 关闭同步
let g:nerdtree_tabs_synchronize_view=0
let g:nerdtree_tabs_synchronize_focus=0

" Vim Workspace Controller
Plugin 'vim-ctrlspace/vim-ctrlspace'
let g:airline_exclude_preview = 1
let g:CtrlSpaceDefaultMappingKey="<Tab><Tab>"   " buffer列表
nnoremap <tab>k :CtrlSpaceGoUp<CR>              " 上一个
nnoremap <tab>j :CtrlSpaceGoDown<CR>            " 下一个
" hi CtrlSpaceSelected guifg=#586e75 guibg=#eee8d5 guisp=#839496 gui=reverse,bold ctermfg=10 ctermbg=7 cterm=reverse,bold
" hi CtrlSpaceNormal   guifg=#839496 guibg=#021B25 guisp=#839496 gui=NONE ctermfg=12 ctermbg=0 cterm=NONE
" hi CtrlSpaceSearch   guifg=#cb4b16 guibg=NONE gui=bold ctermfg=9 ctermbg=NONE term=bold cterm=bold
" hi CtrlSpaceStatus   guifg=#839496 guibg=#002b36 gui=reverse term=reverse cterm=reverse ctermfg=12 ctermbg=8

" Mini Buffer explorer
" Plugin 'fholgado/minibufexpl.vim'       " minibufexpl

" 标签导航
Plugin 'majutsushi/tagbar'              " a class outline viewer for Vim
map <Leader>m :TagbarToggle<CR>
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
    \ }

" ----------------- 快速编码 ------------------

" 快速注释
Plugin 'scrooloose/nerdcommenter'   " Vim plugin for intensely orgasmic commenting

" 快速加入修改环绕字符
Plugin 'tpope/vim-surround'
" for repeat -> enhance surround.vim, . to repeat command
Plugin 'tpope/vim-repeat'


" ----------------- 增强显示 ------------------

Plugin 'vim-airline/vim-airline'  " lean & mean status/tabline for vim that's light as air
let g:airline_powerline_fonts = 0   " use airline fonts


" ----------------- 语言相关 ------------------

" Python
Plugin 'hdima/python-syntax'
let python_highlight_all = 1

Plugin 'python-mode/python-mode'
let g:pymode_python = 'python3'
let g:pymode_rope_lookup_project = 0
let g:pymode_rope = 0

" QML
Plugin 'peterhoeg/vim-qml'

" Vue
Plugin 'posva/vim-vue'

" Golang
" Plugin 'Blackrush/vim-gocode'
Plugin 'fatih/vim-go'       " Go development plugin for Vim
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)
au FileType go nmap <Leader>gb <Plug>(go-doc-browser)
au FileType go nmap <Leader>s <Plug>(go-implements)
au FileType go nmap <Leader>i <Plug>(go-info)
au FileType go nmap <Leader>e <Plug>(go-rename)

" Html
Plugin 'mattn/emmet-vim'

" Javascript
Plugin 'pangloss/vim-javascript'
" syntax highlighting
let g:javascript_enable_domhtmlcss = 1
" jsx
Plugin 'mxw/vim-jsx'
let g:jsx_ext_required = 0

" quickly format javascript
Plugin 'maksimr/vim-jsbeautify'
autocmd FileType javascript  noremap <buffer> <leader>f :call JsBeautify()<cr>
autocmd FileType json  noremap <buffer> <leader>f :call JsonBeautify()<cr>
autocmd FileType html  noremap <buffer> <leader>f :call HtmlBeautify()<cr>
autocmd FileType css noremap <buffer> <leader>f :call CSSBeautify()<cr>

" Markdown
Plugin 'suan/vim-instant-markdown'
let g:instant_markdown_slow = 1
let g:instant_markdown_autostart = 0

" Dart
Plugin 'dart-lang/dart-vim-plugin'
if has('vim_starting')
    set nocompatible
    set runtimepath+=~/.vim/bundle/dart-vim-plugin
endif

" Typescript
"Plugin 'leafgarland/typescript-vim'
Plugin 'HerringtonDarkholme/yats.vim'
"Plugin 'Quramy/tsuquyomi'

" Rust
Plugin 'rust-lang/rust.vim'

" Scala
Plugin 'derekwyatt/vim-scala'

" Wechat mini program
Plugin 'chemzqm/wxapp.vim'

" filetype plugin indent on


" 你的所有插件需要在下面这行之前
call vundle#end()            " 必须
filetype plugin indent on    " 必须 加载vim自带和插件相应的语法和文件类型相关脚本
" 忽视插件改变缩进,可以使用以下替代:
"filetype plugin on
"
" 简要帮助文档
" :PluginList       - 列出所有已配置的插件
" :PluginInstall    - 安装插件,追加 `!` 用以更新或使用 :PluginUpdate
" :PluginSearch foo - 搜索 foo ; 追加 `!` 清除本地缓存
" :PluginClean      - 清除未使用插件,需要确认; 追加 `!` 自动批准移除未使用插件
"
" 查阅 :h vundle 获取更多细节和wiki以及FAQ
" 将你自己对非插件片段放在这行之后
